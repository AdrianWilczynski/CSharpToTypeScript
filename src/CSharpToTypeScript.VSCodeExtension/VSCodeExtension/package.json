{
	"name": "csharp-to-typescript",
	"displayName": "C# to TypeScript",
	"description": "Convert C# Models, ViewModels and DTOs into their TypeScript equivalents.",
	"publisher": "adrianwilczynski",
	"repository": {
		"type": "git",
		"url": "https://github.com/AdrianWilczynski/CSharpToTypeScript"
	},
	"icon": "img/icon.png",
	"version": "1.12.1",
	"engines": {
		"vscode": "^1.38.0"
	},
	"categories": [
		"Other"
	],
	"keywords": [
		"C#",
		"CSharp",
		".NET",
		".NET Core",
		"ASP.NET",
		"ASP.NET Core",
		"Angular",
		"TypeScript",
		"TS",
		"Convert",
		"Converter",
		"Generate",
		"Model",
		"Keybindings",
		"API"
	],
	"activationEvents": [
		"onCommand:csharpToTypeScript.csharpToTypeScriptReplace",
		"onCommand:csharpToTypeScript.csharpToTypeScriptToClipboard",
		"onCommand:csharpToTypeScript.csharpToTypeScriptPasteAs",
		"onCommand:csharpToTypeScript.csharpToTypeScriptToFile"
	],
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "csharpToTypeScript.csharpToTypeScriptReplace",
				"title": "C# to TypeScript (Replace)",
				"enablement": "resourceLangId == csharp || resourceLangId == typescript"
			},
			{
				"command": "csharpToTypeScript.csharpToTypeScriptToClipboard",
				"title": "C# to TypeScript (To Clipboard)",
				"enablement": "resourceLangId == csharp || resourceLangId == typescript"
			},
			{
				"command": "csharpToTypeScript.csharpToTypeScriptPasteAs",
				"title": "C# to TypeScript (Paste As)",
				"enablement": "resourceLangId == csharp || resourceLangId == typescript"
			},
			{
				"command": "csharpToTypeScript.csharpToTypeScriptToFile",
				"title": "C# to TypeScript (To File)",
				"enablement": "resourceLangId == csharp"
			}
		],
		"keybindings": [
			{
				"command": "csharpToTypeScript.csharpToTypeScriptToClipboard",
				"key": "alt+/"
			},
			{
				"command": "csharpToTypeScript.csharpToTypeScriptPasteAs",
				"key": "alt+."
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "csharpToTypeScript.csharpToTypeScriptReplace",
					"when": "resourceLangId == csharp || resourceLangId == typescript"
				},
				{
					"command": "csharpToTypeScript.csharpToTypeScriptToClipboard",
					"when": "resourceLangId == csharp || resourceLangId == typescript"
				},
				{
					"command": "csharpToTypeScript.csharpToTypeScriptPasteAs",
					"when": "resourceLangId == csharp || resourceLangId == typescript"
				},
				{
					"command": "csharpToTypeScript.csharpToTypeScriptToFile",
					"when": "resourceLangId == csharp"
				}
			],
			"editor/context": [
				{
					"command": "csharpToTypeScript.csharpToTypeScriptPasteAs",
					"when": "resourceLangId == typescript",
					"group": "9_cutcopypaste@4"
				}
			],
			"explorer/context": [
				{
					"command": "csharpToTypeScript.csharpToTypeScriptToFile",
					"when": "resourceLangId == csharp",
					"group": "7_modification"
				}
			]
		},
		"configuration": [
			{
				"title": "C# to TypeScript",
				"properties": {
					"csharpToTypeScript.export": {
						"type": "boolean",
						"default": true,
						"description": "Add \"export\" keyword to emitted type."
					},
					"csharpToTypeScript.convertDatesTo": {
						"type": "string",
						"default": "string",
						"enum": [
							"string",
							"date",
							"union"
						],
						"description": "Sets output type for dates"
					},
					"csharpToTypeScript.convertNullablesTo": {
						"type": "string",
						"default": "null",
						"enum": [
							"null",
							"undefined"
						],
						"description": "Sets output type for nullables"
					},
					"csharpToTypeScript.toCamelCase": {
						"type": "boolean",
						"default": true,
						"description": "Convert field names to camel case."
					},
					"csharpToTypeScript.removeInterfacePrefix": {
						"type": "boolean",
						"default": true,
						"description": "Remove \"I\" prefixes."
					},
					"csharpToTypeScript.generateImports": {
						"type": "boolean",
						"default": false,
						"description": "Generate import statements."
					},
					"csharpToTypeScript.quotationMark": {
						"type": "string",
						"default": "double",
						"enum": [
							"double",
							"single"
						],
						"description": "Sets quotation marks."
					},
					"csharpToTypeScript.useKebabCase": {
						"type": "boolean",
						"default": false,
						"description": "Use kebab case for file names."
					},
					"csharpToTypeScript.appendModelSuffix": {
						"type": "boolean",
						"default": false,
						"description": "Append \".model\" suffix to file names."
					},
					"csharpToTypeScript.appendNewLine": {
						"type": "boolean",
						"default": false,
						"description": "Append new line to end of file (removes TSLint warning)."
					}
				}
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile-server && npm run compile",
		"compile": "tsc -p ./",
		"compile-server": "dotnet publish ../CSharpToTypeScript.Server/CSharpToTypeScript.Server.csproj -c Release -o ./server",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile"
	},
	"devDependencies": {
		"@types/glob": "^7.2.0",
		"@types/mocha": "^9.1.1",
		"@types/node": "^16.11.45",
		"@types/vscode": "^1.69.0",
		"glob": "^8.0.3",
		"mocha": "^10.0.0",
		"tslint": "^6.1.3",
		"typescript": "^4.7.4",
		"vscode-test": "^1.6.1"
	}
}